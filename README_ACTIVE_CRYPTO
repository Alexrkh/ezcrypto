= ActiveCrypto - Easy to use Crypto for Ruby on Rails

ActiveCrypto is based on EzCrypto and provides application oriented crypto support for Ruby on Rails applications.

== Features

* Transparent encryption/decryption
* Ruby on Rails like domain language

== Simple examples

==== A simple encrypted class

You specify in your class which fields are encrypted:

	class Document < ActiveRecord::Base
		encrypt :title,:body
	end

Two encrypt it you need to enter a key. For ease of use there is a method called enter_password which sets the key based on a password of your choice.

	doc=Document.new
	doc.enter_password "This stuff is secret man!!!"
	doc.title="Plan to take over the world"
	doc.body="Write apps in Rails"
	doc.save
	
This needs to be done as well if you want to read your document:

	doc=Document.find 1
	doc.enter_password "This stuff is secret man!!!"
	puts doc.name
	
If you don't remember to set a key it will through a MissingKeyError.

==== More realistic example with KeyHolder

It probably isn't much use if each record needs its own key. The solution to this is the KeyHolder. A KeyHolder is an object that holds keys for use by other objects. A typical example would be a user.

	class User < ActiveRecord::Base
		has_many :documents
		keyholder
	end

We use standard ActiveRecord associations to associate the User with his documents. We also need to specify that he is a keyholder. We now modify our Document class as follows:

	class Document < ActiveRecord::Base
		belongs_to :user
		encrypt :title,:body,:key=>:user
	end

We have the standard associations going on here, but we have also added the option :key=>:user to the encrypt statement. Now we could do this:

	@user=User.new
	@user.enter_password "This stuff is secret man!!!"
	@user.save
	 
	@doc=Document.new
	@doc.user=@user 
	@doc.title="Plan to take over the world"
	@doc.body="Write apps in Rails"
	@doc.save
	
You could also do ordinary rails like stuf such as:

	@user.documents.each do |doc|
		puts doc.name
	end

Decryption is done transparently.

== Database Schema issues

ActiveCrypto doesn't really care about the schema, but that said you do need a schema that will accept and not mangle it's output. On MySQL I normally use TINYBLOB instead of VARCHAR and BLOB instead of TEXT.

